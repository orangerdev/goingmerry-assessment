import type { NextPage } from "next"
import Head from "next/head"
import { useEffect, useState, useRef } from "react"
import TimeComponent from "../components/Time"
import TimeDiffComponent from "../components/TimeDiff"
import { Button, Modal, Input } from "antd"
import { getTime } from "../helpers/time"
import AppContext from "../context/AppContext"
import { includes } from "lodash"
import styles from "../styles/Home.module.css"
import "antd/dist/antd.css"

const timeZoneOptions = [
  { timezone: "Asia/Singapore", title: "Singapore" },
  { timezone: "Asia/Tokyo", title: "Tokyo" },
  { timezone: "Asia/Seoul", title: "Seoul" },
  { timezone: "Australia/Melbourne", title: "Melbourne" },
  { timezone: "Australia/Sydney", title: "Sydney" },
  { timezone: "Europe/London", title: "London" },
  { timezone: "Europe/Paris", title: "Paris" },
  { timezone: "Europe/Berlin", title: "Berlin" },
  { timezone: "America/New_York", title: "New York" },
  { timezone: "America/Los_Angeles", title: "Los Angeles" },
]

const Home: NextPage<any> = () => {
  const titleRef = useRef("")
  const timezoneRef = useRef("")

  const [localTime, setLocalTime] = useState<any>(undefined)
  const [timeZones, setTimeZones] = useState<any>([])
  const [timeZonesArray, setTimeZonesArray] = useState<string[]>([])
  const [otherTimes, setOtherTimes] = useState<any>([])
  const [unixTimestamp, setUnixTimestamp] = useState<number>(0)
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false)

  const TikTokTikTok = () => {
    const time = setTimeout(() => {
      setUnixTimestamp((prevData) => prevData + 1000)
    }, 1000)
    return () => {
      clearTimeout(time)
    }
  }

  useEffect(() => {
    TikTokTikTok()
  }, [unixTimestamp])

  useEffect(() => {
    getTime("Asia/Jakarta").then((localTimeData) => {
      setLocalTime(localTimeData)
      setUnixTimestamp(
        new Date(new Date(localTimeData.utc_datetime).toISOString()).getTime()
      )
    })
  }, [])

  useEffect(() => {
    if (timeZones.length < 0) {
      setOtherTimes([])
    }

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [timeZones])

  return (
    <AppContext.Provider
      value={{
        timeZoneOptions,
        removeTimeZoneCard: (timezone: string) => {
          const newTimeZones = timeZones.filter(
            (timeZone: any) => timeZone.timezone !== timezone
          )
          const newOtherTimes = otherTimes.filter(
            (timeZone: any) => timeZone.timezone !== timezone
          )

          setTimeZones(newTimeZones)
          setTimeZonesArray((prevData) =>
            prevData.filter((data) => data !== timezone)
          )
          setOtherTimes(newOtherTimes)
        },
      }}
    >
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          {localTime !== undefined && (
            <>
              <TimeComponent
                {...localTime}
                unixtime={unixTimestamp}
                title="Jakarta"
              />

              <Button
                role="add-new-card"
                className="mb-4 rounded"
                onClick={() => {
                  setIsModalOpen(true)
                }}
              >
                Add New Time Zone
              </Button>
            </>
          )}

          <div id="otherTimes-container" className="flex">
            {otherTimes.length > 0 &&
              otherTimes.map((otherTime: any, index: number) => {
                return (
                  <TimeDiffComponent
                    key={`time-${index}`}
                    {...otherTime}
                    localUnixtime={unixTimestamp}
                  />
                )
              })}
          </div>

          <Modal
            title="Add New Timezone Card"
            open={isModalOpen}
            closable={false}
            footer={
              <>
                <button
                  type="button"
                  className="ant-btn ant-btn-default"
                  onClick={() => {
                    setIsModalOpen(false)
                  }}
                >
                  <span>Cancel</span>
                </button>
                <button
                  type="button"
                  id="submitNewCard"
                  className="ant-btn ant-btn-primary"
                  onClick={() => {
                    console.log("limitt", otherTimes)
                    if (otherTimes.length >= 4) {
                      alert("Limit to 4 cards")
                      return
                    } else if (titleRef.current === "") {
                      alert("Please fill the title")
                      return
                    } else if (timezoneRef.current === "") {
                      alert("You must choose a timezone")
                      return
                    } else if (includes(timeZonesArray, timezoneRef.current)) {
                      alert("You have already added this timezone")
                      return
                    }

                    getTime(timezoneRef.current).then((data) => {
                      const location = timeZoneOptions.find((option: any) => {
                        return timezoneRef.current === option.timezone
                      })

                      setOtherTimes((prevData: any) => [
                        ...prevData,
                        { ...data, location, title: titleRef.current },
                      ])
                    })

                    setTimeZones((prevData: any) => [
                      ...prevData,
                      {
                        timezone: timezoneRef.current,
                        title: titleRef.current,
                      },
                    ])

                    setTimeZonesArray((prevData) => [
                      ...prevData,
                      timezoneRef.current,
                    ])
                    setIsModalOpen(false)
                  }}
                >
                  <span>Add</span>
                </button>
              </>
            }
          >
            <div className="mb-4">
              <label className="block mb-2" htmlFor="titleCard">
                Card Title
              </label>
              <Input
                placeholder="Basic usage"
                id="titleCard"
                onChange={(e) => {
                  titleRef.current = e.target.value
                }}
                maxLength={20}
              />
            </div>
            <div className="mb-4">
              <label className="block mb-2" htmlFor="timeZoneCard">
                Timezone
              </label>
              <select
                id="timeZoneCard"
                style={{ width: "100%" }}
                defaultValue=""
                onChange={(e) => {
                  timezoneRef.current = e.target.value
                }}
                className="bg-white border p-2"
              >
                <option value="">Choose a Timezone</option>
                {timeZoneOptions.map((option: any, index: number) => (
                  <option
                    key={`option-${index}`}
                    value={option.timezone}
                    disabled={includes(timeZonesArray, option.timezone)}
                  >
                    {option.title}
                  </option>
                ))}
              </select>
            </div>
          </Modal>
        </main>
      </div>
    </AppContext.Provider>
  )
}

export default Home
